//椒盐噪声
import numpy as np
import cv2
from numpy import shape
import random
def funcation(src,percetage):
    NoiseImg=src
    NoiseNum=int(percetage*src.shape[0]*src.shape[1])
    for i in range(NoiseNum):
        randX=random.randint(0,src.shape[0]-1)
        randY=random.randint(0,src.shape[1]-1)
        if random.random()<=0.5:
            NoiseImg[randX,randY]=0
        else:
            NoiseImg[randX,randY]=255
    return NoiseImg

img=cv2.imread('lenna.jpg',0)
img1=funcation(img,0.8)

img=cv2.imread('lenna.jpg')
img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow('source',img2)
cv2.imshow('lenna_pepperandSalt',img1)
cv2.waitKey(0)


//高斯噪声
import numpy as np
import cv2
from numpy import shape
import random
def GaussianNoise(src,means,sigma,percetage) :
    NoiseImg=src
    NoiseNum=int(percetage*src.shape[0]*src.shape[1])
    for i in range(NoiseNum) :
        randX=random.randint(0,src.shape[0]-1)
        randY=random.randint(0,src.shape[1]-1)
        NoiseImg[randX,randY]=NoiseImg[randX,randY]+random.gauss(means,sigma)
        if NoiseImg[randX,randY]< 0:
         NoiseImg[randX,randY]=0
        elif NoiseImg[randX,randY]>255:
            NoiseImg[randX,randY]=255
    return NoiseImg

img = cv2.imread('lenna.jpg',0)
img1 = GaussianNoise(img,2,4,0.8)
img = cv2.imread('lenna.jpg')
img2 = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
cv2.imshow('source',img2)
cv2.imshow('lenna_GaussianNoise',img1)
cv2.waitKey(0)

//调佣接口
import numpy as np
from sklearn.decomposition import PCA
S = np.array([[-1,2,66,-1],[-2,6,58,-1],[-3,8,45,-2],[1,9,36,1],[2,10,62,1],[3,5,83,2]])
pca = PCA(n_components=2)
pca.fit(S)
newS=pca.fit_transform(S)
print(newS)

//pca
import numpy as np

# ndarray shape: m,n  m个sample， n个label
# k：目标维度
def pca(ndarray, k):
    ndarray = ndarray - ndarray.mean(axis=0)
    covariance = np.dot(ndarray.T, ndarray)/ndarray.shape[0]
    vals, vecs = np.linalg.eig(covariance)
    target_val = np.argsort(-1*vals)
    target_vec = vecs[:, target_val[:k]]    # 转换矩阵
    return np.dot(ndarray, target_vec)

ndarray = np.random.randint(0,100,size=(8,3))

print(pca(ndarray, 2))
